// <summary>
//  Try to fix KSP Bug 27381 (and probably others).
// 
//  KSP parts have multiple ids:
//  - craftID : Generated by the editor. Launching multiple times the same craft will generate
//              vessels with parts that have the same craftId (and it's not the only case as KSP is not 
//              even trying to generate unique craftID for different crafts).
//              It is present in the "cid" attribute of the PART nodes in the .sfs file.
//  - missionID : Identifier computed when launching a craft. All parts of the same launched craft
//                have the same missionID. It is present in the "mid" attribute of PART nodes in the .sfs file.
//  - flightID : Unique among all the parts of all the existing vessels.
//               Present in the "persistentId" attribute of PART nodes in the .sfs file. 
//               It is a "real" part identifier.
//
//  Struts are parts that reference a target part. But the link to the target part is stored in a PARTDATA node
//  in the .sfs file as a "tgt" attribute that represents a **craftID**.
//
//  So, when loading a vessel with struts, KSP will search for the target part using the strut target craftID 
//  (in the "tgt" attribute), AND the strut missionID (in the "mid" attribute). Until EVA Construction Mode,
//  it works fine ! Using the missionID is the reason why this technic work well even on vessels composed
//  of multiple docked vessels (each vessel having a different missionID).
//
//  But now, with EVA Construction mode, when you add an piece from an inventory :
//  - The new piece's missionID will be "0", except for struts where it will be equal to the missionID of the 
//    strut present in the inventory case.
//  - The new piece's craftID will be the same as the piece's craftID present in the inventory case. 
//    But note that for stacked pieces, there is only ONE part in the inventory case (associated with a counter).
//    Adding two stacked pieces from the same inventory case location will generate two parts with the same 
//    craftID (and missionID !! See the problem with struts ?)
//  - If the piece is a strut, the target (ie "tgt" attribute of the PARTDATA node) will be the craftID of 
//    the target part (which is incoherent with the missionID !!).
//
//  And so, once the game is saved and reloaded, the strut will be seen as connected to an unknown part, 
//  and will be disconnected.
//  
//  The solution need to change two things when a part is attached : 
//  - Change the strut missionID to the missionID of the target part.
//  - Ensure that the craftID/missionID couple of any newly added part is unique, updating the craftID if needed.
//
//  That's what this mod does... 
//
//  Beware that it will not make a "corrupted" savegame work again. You will have to edit it by hand 
//  (or via a tool like KML) to re-generate unique craftID/missionID couples. Beware of tgt and
//  other attribute that may reference the craftID (especially with mods) : You will have to update them too !
//
// </summary>
using UnityEngine;

namespace com.github.lhervier.ksp {
	
	[KSPAddon(KSPAddon.Startup.PSystemSpawn, false)]
    public class Bug26942Fix : MonoBehaviour {
        
        // <summary>
        //  Start of the plugin
        // </summary>
        public void Start() {
            GameEvents.OnEVAConstructionModePartAttached.Add(EVAConstructionModePartAttached);
            GameEvents.OnFlightCompoundPartLinked.Add(FlightCompoundPartLinked);
            Log("Plugin started");
        }

        // <param name="part">The part that we search for a duplicate</param>
        // <summary>
        //  Update the craftID of the part so that's the craftID/missionID couple is unique.
        // </summary>
        private void UpdateCraftID(Part part) {
            bool found;
            do {
                found = false;
                foreach( Part otherPart in part.vessel.Parts ) {
                    if( otherPart.flightID == part.flightID ) {     // This is the newly added part
                        continue;
                    }
                    if( otherPart.craftID == part.craftID && otherPart.missionID == part.missionID ) {
                        Log("Part with duplicate craftID/missionID couple found");
                        found = true;
                        part.craftID++;
                        Log("=> New part's craftID updated to " + part.craftID);
                        break;
                    }
                }
            } while( found );
        }

        // <param name="message">The message to log</param>
        // <summary>
        //  Logs a message, appending a prefix before it, so we can find it easily in KSP.log.
        // </summary>
        private void Log(string message) {
            Debug.Log("[Bug26942Fix] " + message);
        }

        // ===============================================================================

        // <param name="vessel">Vessel to which the part has been attached</param>
        // <param name="part">Part attached to the vessel (including as strut)</param>
        // <summary>
        //  Fired when a part is attached to a Vessel (including a strut) while in EVA Construction Mode.
        //  If the part is a strut, we will not have access to the target part information in this method.
        // </summary>
        private void EVAConstructionModePartAttached(Vessel vessel, Part part) {
            // Struts will be managed using their own event
            if( part is CompoundPart ) {
                // Note that here, part.target is always null
                return;
            }

            // Update craftID so that there is no other part with the same craftId and missionId
            UpdateCraftID(part);
        }

        // <param name="part">The welded part (ie strut)</param>
        // <summary>
        //  This event if not specific to EVA Construction Mode. It is called
        //  every time the vessel is loaded. 
        //  But adding a part with EVA Construction Mode will also fire it.
        //  This time, the informations about the target part is available.
        // </summary>
        void FlightCompoundPartLinked(CompoundPart strut) {
            // strut.target may be null if strut is not connected to a target
            if( strut.target == null ) {
                return;
            }
            
            // Once everything is OK, it will stay as is.
            if( strut.missionID == strut.target.missionID) {
                return;
            }

            // We need to update the strut's missionID !
            Log("Strut target is " + strut.target.craftID + "/" + strut.target.missionID);
            strut.missionID = strut.target.missionID;
            Log("=> strut missionID updated to " + strut.missionID);

            // Update craftID so that there is no other part with the same craftId and missionId
            UpdateCraftID(strut);
        }
    }
}
